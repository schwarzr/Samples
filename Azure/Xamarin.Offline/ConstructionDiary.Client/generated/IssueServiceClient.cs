// <auto-generated />
[assembly: Codeworx.Rest.RestProxy(typeof(global::ConstructionDiary.Contract.IIssueService), typeof(ConstructionDiary.Client.Generated.IssueServiceClient))]
namespace ConstructionDiary.Client.Generated
{
    public class IssueServiceClient : Codeworx.Rest.Client.RestClient<global::ConstructionDiary.Contract.IIssueService>, global::ConstructionDiary.Contract.IIssueService
    {
        public IssueServiceClient(Codeworx.Rest.Client.RestOptions<global::ConstructionDiary.Contract.IIssueService> options): base(options)
        {
        }

        public global::System.Threading.Tasks.Task CreateIssueAsync(global::ConstructionDiary.Model.IssueCreateItem item)
        {
            return CallAsync(c => c.CreateIssueAsync(item));
        }

        public global::System.Threading.Tasks.Task DeleteIssueTypeAsync(global::System.Guid id)
        {
            return CallAsync(c => c.DeleteIssueTypeAsync(id));
        }

        public global::System.Threading.Tasks.Task<global::ConstructionDiary.Model.IssueCreateData> GetIssueCreateAsync(global::System.Guid projectId)
        {
            return CallAsync(c => c.GetIssueCreateAsync(projectId));
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<global::ConstructionDiary.Model.IssueListItem>> GetIssuesAsync(global::System.Guid projectId)
        {
            return CallAsync(c => c.GetIssuesAsync(projectId));
        }

        public global::System.Threading.Tasks.Task<global::ConstructionDiary.Model.IssueTypeListItem> GetIssueTypeAsync(global::System.Guid id)
        {
            return CallAsync(c => c.GetIssueTypeAsync(id));
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<global::ConstructionDiary.Model.IssueTypeListItem>> GetIssueTypeListItemsAsync()
        {
            return CallAsync(c => c.GetIssueTypeListItemsAsync());
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<global::ConstructionDiary.Model.IssueTypeInfo>> GetIssueTypesAsync()
        {
            return CallAsync(c => c.GetIssueTypesAsync());
        }

        public global::System.Threading.Tasks.Task InsertIssueTypeAsync(global::ConstructionDiary.Model.IssueTypeListItem issue)
        {
            return CallAsync(c => c.InsertIssueTypeAsync(issue));
        }

        public global::System.Threading.Tasks.Task UpdateIssueTypeAsync(global::ConstructionDiary.Model.IssueTypeListItem issue)
        {
            return CallAsync(c => c.UpdateIssueTypeAsync(issue));
        }
    }
}