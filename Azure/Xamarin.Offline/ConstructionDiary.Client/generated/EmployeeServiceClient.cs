// <auto-generated />
[assembly: Codeworx.Rest.RestProxy(typeof(global::ConstructionDiary.Contract.IEmployeeService), typeof(ConstructionDiary.Client.Generated.EmployeeServiceClient))]
namespace ConstructionDiary.Client.Generated
{
    public class EmployeeServiceClient : Codeworx.Rest.Client.RestClient<global::ConstructionDiary.Contract.IEmployeeService>, global::ConstructionDiary.Contract.IEmployeeService
    {
        public EmployeeServiceClient(Codeworx.Rest.Client.RestOptions<global::ConstructionDiary.Contract.IEmployeeService> options): base(options)
        {
        }

        public global::System.Threading.Tasks.Task DeleteAsync(global::System.Guid id)
        {
            return CallAsync(c => c.DeleteAsync(id));
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<global::ConstructionDiary.Model.EmployeeInfo>> GetEmployeeInfos(global::System.Guid projectId)
        {
            return CallAsync(c => c.GetEmployeeInfos(projectId));
        }

        public global::System.Threading.Tasks.Task<global::ConstructionDiary.Model.EmployeeListItem> GetEmployeeListItemAsync(global::System.Guid id)
        {
            return CallAsync(c => c.GetEmployeeListItemAsync(id));
        }

        public global::System.Threading.Tasks.Task<global::System.Collections.Generic.IEnumerable<global::ConstructionDiary.Model.EmployeeListItem>> GetEmployeeListItemsAsync(global::System.Guid projectId)
        {
            return CallAsync(c => c.GetEmployeeListItemsAsync(projectId));
        }

        public global::System.Threading.Tasks.Task InsertAsync(global::System.Guid projectId, global::ConstructionDiary.Model.EmployeeListItem item)
        {
            return CallAsync(c => c.InsertAsync(projectId, item));
        }

        public global::System.Threading.Tasks.Task UpdateAsync(global::ConstructionDiary.Model.EmployeeListItem item)
        {
            return CallAsync(c => c.UpdateAsync(item));
        }
    }
}